plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

def versionProperties = new Properties()
def targetPropertiesFile = file("version_properties/${project.minecraft_version}.properties")

if (targetPropertiesFile.exists()) {
    targetPropertiesFile.withInputStream { versionProperties.load(it) }
}

def compatibleVersions = versionProperties.getProperty("minecraft_version")

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${compatibleVersions}"
group = project.maven_group

repositories {
	// There might be other repos there too, just add it at the end
	maven {
		url "https://maven.nucleoid.xyz/"
	}

	mavenCentral()
	mavenLocal()
}

dependencies {
    // Version-specific dependencies
    minecraft "com.mojang:minecraft:${versionProperties.getProperty("minecraft_version")}"
    mappings "net.fabricmc:yarn:${versionProperties.getProperty("yarn_mappings_version")}:v2"
    modImplementation "net.fabricmc:fabric-loader:${versionProperties.getProperty("fabric_loader_version")}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${versionProperties.getProperty("fabric_version")}"
    modImplementation include("eu.pb4:placeholder-api:${versionProperties.getProperty("placeholder_api_version")}")
	modImplementation include("eu.pb4:sgui:${versionProperties.getProperty("sgui_api_version")}")
	modImplementation include("xyz.nucleoid:server-translations-api:${versionProperties.getProperty("server_translations_api_version")}")

	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.4.1")))

	include(modImplementation("me.lucko:fabric-permissions-api:${versionProperties.getProperty("fabric_permissions_api_version")}"))
	modImplementation "me.lucko:fabric-permissions-api:${versionProperties.getProperty("fabric_permissions_api_version")}"
}

processResources {
    inputs.property "version", version
    inputs.property "minecraft_version", versionProperties.getProperty("minecraft_version")
	inputs.property "java_version", versionProperties.getProperty("java_version")
	inputs.property "sgui_version", versionProperties.getProperty("sgui_api_version")
	inputs.property "fabricloader_version", versionProperties.getProperty("fabric_loader_version")
	inputs.property "refmap_name", "showcase.mixins.refmap.json"

    filesMatching("fabric.mod.json") {
        expand(
            "version": version,
			"java_version": versionProperties.getProperty("java_version"),
			"minecraft_version": versionProperties.getProperty("minecraft_version"),
			"sgui_api_version": versionProperties.getProperty("sgui_api_version"),
			"fabric_loader_version": versionProperties.getProperty("fabric_loader_version")
        )
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", archivesBaseName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

if (System.getenv("MODRINTH")) {
	modrinth {
		token = System.getenv("MODRINTH")
		projectId = 'DC8AYtgP'
		versionNumber = "" + version
		versionType = "release"
		changelog = System.getenv("CHANGELOG")
		uploadFile = remapJar
		gameVersions = [((String) project.minecraft_version)]
		loaders = ["fabric", "quilt"]
		syncBodyFrom = rootProject.file("README.md").text
	}

	remapJar {
		finalizedBy project.tasks.modrinth
	}
}