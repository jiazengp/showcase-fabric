plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

def versionProperties = new Properties()
def targetPropertiesFile = file("version_properties/${project.minecraft_version}.properties")

if (targetPropertiesFile.exists()) {
	targetPropertiesFile.withInputStream { versionProperties.load(it) }
}

def compatibleVersions = versionProperties.getProperty("minecraft_version")

base {
	archivesName = project.archives_base_name
}

version = "${project.mod_version}+${compatibleVersions}"
group = project.maven_group

loom {
	serverOnlyMinecraftJar()
}

fabricApi {
	configureTests {
		createSourceSet = true
		modId = "fabric-docs-reference-test-${project.name}"
		eula = true
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	maven {
		url = "https://maven.nucleoid.xyz/"
	}
}

dependencies {
	implementation platform("net.fabricmc.fabric-api:fabric-api-bom:${versionProperties.getProperty("fabric_version")}")

	minecraft "com.mojang:minecraft:${versionProperties.getProperty("minecraft_version")}"
	mappings "net.fabricmc:yarn:${versionProperties.getProperty("yarn_mappings_version")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${versionProperties.getProperty("fabric_loader_version")}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${versionProperties.getProperty("fabric_version")}"
	modImplementation include("eu.pb4:placeholder-api:${versionProperties.getProperty("placeholder_api_version")}")
	modImplementation include("eu.pb4:sgui:${versionProperties.getProperty("sgui_api_version")}")
	modImplementation include("xyz.nucleoid:server-translations-api:${versionProperties.getProperty("server_translations_api_version")}")

	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.5.0")))
	include(modImplementation("me.lucko:fabric-permissions-api:${versionProperties.getProperty("fabric_permissions_api_version")}"))

	include(implementation("de.exlll:configlib-core:4.6.1"))
	include(implementation("de.exlll:configlib-yaml:4.6.1"))
	include(implementation("org.snakeyaml:snakeyaml-engine:2.10"))

	// Test dependencies
	testImplementation "net.fabricmc:fabric-loader-junit:${versionProperties.getProperty("fabric_loader_version")}"
	testImplementation "net.fabricmc.fabric-api:fabric-api:${versionProperties.getProperty("fabric_version")}"
	testImplementation "net.fabricmc:fabric-loader:${versionProperties.getProperty("fabric_loader_version")}"
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

processResources {
	inputs.property "version", version
	inputs.property "minecraft_version", versionProperties.getProperty("minecraft_version")
	inputs.property "java_version", versionProperties.getProperty("java_version")
	inputs.property "sgui_version", versionProperties.getProperty("sgui_api_version")
	inputs.property "fabricloader_version", versionProperties.getProperty("fabric_loader_version")
	inputs.property "refmap_name", "showcase.mixins.refmap.json"

	filesMatching("fabric.mod.json") {
		expand(
				"version": version,
				"java_version": versionProperties.getProperty("java_version"),
				"minecraft_version": versionProperties.getProperty("minecraft_version"),
				"sgui_api_version": versionProperties.getProperty("sgui_api_version"),
				"fabric_loader_version": versionProperties.getProperty("fabric_loader_version")
		)
	}
}

jar {
	inputs.property "archivesName", base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}" }
	}
}

// Modrinth publishing
if (System.getenv("MODRINTH")) {
	modrinth {
		token = System.getenv("MODRINTH")
		projectId = 'DC8AYtgP'
		versionNumber = "" + version
		versionType = "release"
		changelog = rootProject.file("CHANGELOG.md").text
		uploadFile = remapJar
		gameVersions = [((String) project.minecraft_version)]
		loaders = ["fabric", "quilt"]
		syncBodyFrom = rootProject.file("README.md").text
	}

	remapJar {
		finalizedBy project.tasks.modrinth
	}
}
