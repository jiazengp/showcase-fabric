# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      minecraft-versions: ${{ steps.get-versions.outputs.versions }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      
      - name: get minecraft versions
        id: get-versions
        run: |
          # Extract versions from version_properties directory
          versions=$(find version_properties/ -name "*.properties" -exec basename {} .properties \; | jq -R -s -c 'split("\n")[:-1]')
          echo "versions=$versions" >> $GITHUB_OUTPUT
          echo "Found versions: $versions"

  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        minecraft-version: ${{ fromJson(needs.generate-matrix.outputs.minecraft-versions) }}
      fail-fast: false
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: setup jdk
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'

      - name: make gradle wrapper executable
        run: chmod +x ./gradlew

      - name: build for Minecraft ${{ matrix.minecraft-version }}
        run: ./gradlew build -PmcVer=${{ matrix.minecraft-version }}

      - name: Store reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.minecraft-version }}
          path: |
            **/build/reports/
            **/build/test-results/

      - name: capture build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts-${{ matrix.minecraft-version }}
          path: build/libs/
